{"version":3,"sources":["Components/GoogleMapsComponents/MapConfig.js","Components/GoogleMapsComponents/GoogleStreetView.js","Components/AsideComponents/StarRating.js","Components/RestaurantComponents/RestaurantReviewItem.js","Components/AsideComponents/RestaurantDetails.js","Components/AsideComponents/RestaurantListItem.js","Components/RestaurantComponents/MinStarFilter.js","Components/RestaurantComponents/MaxStarFilter.js","Components/AsideComponents/RestaurantList.js","Components/GoogleMapsComponents/MapContainer.js","Components/GridComponent/MainGrid.js","App.js","serviceWorker.js","index.js"],"names":["zoomLevel","latitudeForFocusingMap","longitudeForFocusingMap","markerLongitude","markerLatitude","useDefaultUI","apiKey","googleMapsMarkerIcon","GoogleStreetView","props","streetViewPanoramaOptions","position","lat","restaurant","geometry","location","lng","pov","heading","pitch","zoom","style","width","height","backgroundColor","StarRating","Box","component","mb","borderColor","left","margin","padding","top","Typography","Rating","name","size","value","rating","readOnly","useStyles","makeStyles","theme","root","maxWidth","nWidth","zindex","overflow","palette","background","paper","inline","display","RestaurantReviewItem","ListItem","className","key","Date","now","Math","floor","random","review","ListItemText","primary","author_name","secondary","text","Divider","opacity","listStyle","title","fontSize","pos","marginBottom","spacing","RestaurantDetails","classes","useState","setName","address","setAddress","setReview","setRating","handleSubmit","evt","preventDefault","addRestaurant","handleReviewSubmit","addReview","details","Card","CardContent","CardMedia","photos","src","getUrl","variant","color","vicinity","onSubmit","TextField","id","label","multiline","rows","defaultValue","onChange","e","target","parseInt","type","reviews","map","showCurrentRestaurant","noValidate","autoComplete","required","placeholder","Button","RestaurantListItem","alignItems","onClick","onClickListItem","ListItemAvatar","Avatar","alt","Fragment","MinStarFilter","React","selectedValue","minValue","setMinValue","event","newValue","updateMinRating","MaxStarFilter","maxValue","setMaxValue","updateMaxRating","RestaurantList","filterMinRating","filterMaxRating","List","Object","keys","restaurantArray","restaurant_id","GoogleApiWrapper","MapConfig","hasErrors","setErrors","setRestaurantArray","restaurantDetailsList","setRestaurantDetailsList","mapObject","window","google","maps","Map","document","createElement","googlePlacesService","places","PlacesService","useEffect","a","async","fetch","json","then","res","storeRestaurantArrayResults","catch","err","activeMarker","activeRestaurant","activeRestaurantDetails","showingInfoWindow","showingRestaurantDetailsWindow","tempMarker","createRestaurantForm","tempMarkerLocation","state","setState","results","newRestaurantArray","onMarkerClick","marker","place_id","request","placeId","getDetails","placeResult","status","tempRestaurantDetailsList","latLng","disableDefaultUI","initialCenter","onClose","visible","push","cnt_rating","sum_rating","restaurantReview","avg_rating","tempRestaurantArray","newMarker","flexGrow","textAlign","MainGrid","Grid","container","item","xs","sm","App","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c27bb11.chunk.js","sourcesContent":["export default {\r\n    zoomLevel: 16,\r\n    latitudeForFocusingMap: 51.4344,\r\n    longitudeForFocusingMap: 6.7623,\r\n    markerLongitude: 51.4344,\r\n    markerLatitude: 6.7623,\r\n    useDefaultUI: false,\r\n    apiKey: 'AIzaSyC6iHzGGrNmtKZB-LDf2tCYMOQXKD6YPac',\r\n    googleMapsMarkerIcon: 'marker icon link'\r\n};","import React from 'react';\r\nimport ReactStreetview from 'react-streetview';\r\n\r\n/**\r\n * Component GoogleStreetView displays image from restaurants created by the user.\r\n * Following parameters are used:\r\n * - restaurant (current selected restaurant) \r\n */\r\nexport default function GoogleStreetView(props) {\r\n\t//console.log(props)\r\n\t\t// see https://developers.google.com/maps/documentation/javascript\r\n\t\tconst googleMapsApiKey = 'AIzaSyC6iHzGGrNmtKZB-LDf2tCYMOQXKD6YPac'\r\n\r\n\t\t// see https://developers.google.com/maps/documentation/javascript/3.exp/reference#StreetViewPanoramaOptions\r\n\t\tconst streetViewPanoramaOptions = {\r\n\t\t\tposition: {lat: props.restaurant.geometry.location.lat, lng:props.restaurant.geometry.location.lng},\r\n\t\t\tpov: {heading: 100, pitch: 0},\r\n\t\t\tzoom: 1\r\n\t\t};\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div style={{\r\n\t\t\t\twidth: '275px',\r\n\t\t\t\theight: '250px',\r\n\t\t\t\tbackgroundColor: '#eeeeee'\r\n\t\t\t}}>\r\n\t\t\t\t<ReactStreetview\r\n\t\t\t\t\tapiKey={googleMapsApiKey}\r\n\t\t\t\t\tstreetViewPanoramaOptions={streetViewPanoramaOptions}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t\r\n}\r\n","import React from 'react';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n/**\r\n * Component StarRating display star rating from current selected restaurant reviews.\r\n * Following parameters are used:\r\n * - rating (current restaurant review rating)\r\n */\r\nexport default function StarRating(props) {\r\n  \r\n  return (\r\n    <div>\r\n       <Box component=\"fieldset\" mb={2} borderColor=\"transparent\"\r\n        style={{position:\"absolute\", left:175,margin:0,padding:0,top:15}}\r\n       >\r\n        <Typography component=\"legend\"></Typography>\r\n        <Rating name=\"read-only\" size=\"small\" value={props.rating} readOnly />\r\n      </Box>\r\n      </div>\r\n     );\r\n    }","import React from \"react\"\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from \"@material-ui/core/Divider\";\r\n\r\nimport StarRating from \"../AsideComponents/StarRating\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: '36ch',\r\n      nWidth: 275,\r\n      height: 470,\r\n      zindex: 1,\r\n      position: \"absolute\",\r\n      top:\"30%\",\r\n      overflow:\"scroll\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    inline: {\r\n      display: 'inline',\r\n    },\r\n  }));\r\n\r\n/**\r\n * Component RestaurantReviewItem display a single review for the current selected restaurant.\r\n * Following parameters are used:\r\n * - review (review data) \r\n */\r\nexport default function RestaurantReviewItem(props){\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        <div>\r\n          <ListItem className=\"myListItem\" key={Date.now()+Math.floor(Math.random()*100)}>\r\n            <StarRating rating={props.review.rating} />\r\n            <ListItemText\r\n              primary={props.review.author_name}\r\n              secondary={props.review.text}\r\n              />\r\n          </ListItem>\r\n          <Divider/>\r\n        </div>\r\n      );\r\n  }\r\n","import React, { useState } from 'react';\r\n\r\nimport GoogleStreetView from \"../GoogleMapsComponents/GoogleStreetView\"\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport TextField from \"@material-ui/core/TextField\"\r\n\r\n\r\nimport RestaurantReviewItem from \"../RestaurantComponents/RestaurantReviewItem\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: 320,\r\n    height: 700,\r\n    zindex: 1,\r\n    position: \"absolute\",\r\n    top:\"12%\",\r\n    opacity:\"0.9\",\r\n    margin:10,\r\n    overflow:\"scroll\",\r\n    listStyle:\"none\"\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n    '& .MuiTextField-root': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n      top:50,\r\n      position: \"absolute\",\r\n    },\r\n    \r\n  },\r\n}));\r\n\r\n\r\n/**\r\n * Component RestaurantDetails displays active restaurant Information or the form to create a new restaurant.\r\n * It contains restaurantReviewItem.\r\n * Following parameters are used:\r\n * - addRestaurant (parent method to add a restaurant)\r\n * - addReview (parent method to add a review)\r\n * - restaurant (current selected restaurant)\r\n * - details (current selected restaurant details (reviews and photos))\r\n */\r\nexport default function RestaurantDetails(props) {\r\n  const classes = useStyles();\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [address, setAddress] = useState(\"\");\r\n  const [review, setReview] = useState(\"\");\r\n  const [rating, setRating] = useState(\"\");\r\n\r\n  const handleSubmit = (evt) => {\r\n      evt.preventDefault();\r\n      props.addRestaurant({name: name, address: address})\r\n  }\r\n\r\n  const handleReviewSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    props.addReview({review: review, rating: rating})\r\n}\r\n\r\n  const showCurrentRestaurant = (props, details) => {\r\n    return (\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n          <CardMedia>\r\n            {\r\n              details && details.photos && details.photos[0]\r\n              ?\r\n              <img src={details.photos[0].getUrl()} style={{height:200, width:275}}/>\r\n\r\n              :\r\n              (<GoogleStreetView\r\n                restaurant={props}\r\n              />)\r\n            }\r\n            \r\n          </CardMedia>  \r\n          <Typography variant=\"h5\" component=\"h2\">\r\n            {props.name}\r\n          </Typography>\r\n          <Typography className={classes.pos} color=\"textSecondary\">\r\n            {props.vicinity}\r\n          </Typography>\r\n        \r\n          <form onSubmit={handleReviewSubmit}>\r\n          <TextField\r\n              style= {{\r\n              width:240,\r\n              height:55,\r\n          }}\r\n            id=\"outlined-multiline-static\"\r\n            label=\"Review\"\r\n            multiline\r\n            rows={4}\r\n            defaultValue=\"\"\r\n            variant=\"outlined\"\r\n            onChange={e => setReview(e.target.value)}\r\n        />\r\n        <br /><br /><br /><br />\r\n\r\n        <Rating \r\n            name=\"size-small\"\r\n            defaultValue={1} size=\"small\"\r\n            onChange={e => setRating(parseInt(e.target.value))} />\r\n\r\n            <input type=\"submit\" value=\"Submit\"\r\n              style={{position: \"absolute\",\r\n              left: \"60%\"\r\n              }} />\r\n          </form>\r\n      \r\n          {\r\n            details.reviews\r\n            ?\r\n            details.reviews.map(review => (\r\n              <RestaurantReviewItem\r\n                key={Date.now()+Math.floor(Math.random()*100)}\r\n                review={review}>\r\n              </RestaurantReviewItem>\r\n           \r\n            ))\r\n            \r\n            :\r\n            null\r\n          }\r\n          \r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n  \r\n  const showCreateRestaurantForm = () => {\r\n  \r\n    return (\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n       \r\n        <form onSubmit={handleSubmit} className={classes.root} noValidate autoComplete=\"off\" style={{left: -27}}>\r\n      <div style={{position: \"absolute\",top: -25, left: 40}}>\r\n        <h4>Add new Restaurant</h4>\r\n      <TextField\r\n          style= {{margin:5}}\r\n          required\r\n          id=\"filledRequiredName\"\r\n          label=\"Restaurant Name\"\r\n          placeholder=\"Restaurant Name\"\r\n          value={name}\r\n          variant=\"outlined\"\r\n          onChange={e => setName(e.target.value)}\r\n        />\r\n         <TextField\r\n          style= {{margin:5}}\r\n          required\r\n          id=\"filledRequiredAdresse\"\r\n          label=\"Restaurant Adresse\"\r\n          placeholder=\"Restaurant Addresse\"\r\n          value={address}\r\n          variant=\"outlined\"\r\n          onChange={e => setAddress(e.target.value)}\r\n        /> \r\n\r\n        <Button\r\n            style = {{\r\n              width:50,\r\n              height:30,\r\n              margin:2,\r\n              position: \"absolute\",\r\n              top: 230,\r\n              left: 140,\r\n          }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            value=\"Submit\"\r\n            > \r\n            Submit  \r\n        </Button>\r\n      </div>\r\n      \r\n    </form>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  };\r\n\r\n  if(props && props.restaurant){\r\n    return showCurrentRestaurant(props.restaurant, props.details);\r\n  }else{\r\n    return showCreateRestaurantForm();\r\n  }\r\n}","import React from \"react\"\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: '36ch',\r\n      nWidth: 275,\r\n      height: 470,\r\n      zindex: 1,\r\n      position: \"absolute\",\r\n      top:\"12%\",\r\n      left: \"70%\",\r\n      overflow:\"scroll\",\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n    inline: {\r\n      display: 'inline',\r\n    },\r\n  }));\r\n\r\n/**\r\n * Component RestaurantListItem displays one restaurant inside RestaurantList.\r\n * Following parameters are used:\r\n * - onClickListItem (parent method to open the corresponding restaurant)\r\n * - restaurant (restaurant data)\r\n */\r\nexport default function RestaurantListItem(props){\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        \r\n          <ListItem \r\n            alignItems=\"flex-start\"\r\n            onClick={() => props.onClickListItem(props)}\r\n            >\r\n            <ListItemAvatar>\r\n              <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\"\r\n              style={{backgroundColor:\"orange\"}}/>\r\n            </ListItemAvatar>\r\n            <ListItemText\r\n              primary={props.restaurant.name}\r\n              secondary={\r\n                <React.Fragment>\r\n                  <Typography\r\n                    component=\"span\"\r\n                    variant=\"body2\"\r\n                    className={classes.inline}\r\n                    color=\"textPrimary\"\r\n                    style={{fontSize:\"small\"}}\r\n                  >\r\n                     {props.restaurant.vicinity}\r\n                  </Typography>\r\n                 \r\n                </React.Fragment>\r\n              }\r\n            />\r\n          </ListItem>\r\n          \r\n      );\r\n  }\r\n","import React from 'react';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n/**\r\n * Component MinStarFilter displays a current minimum rating filter.\r\n * Following parameters are used:\r\n * - selectedValue (current minimum rating filter)\r\n * - updateMinRating (parent method to update current minimum rating filter)\r\n */\r\nexport default function MinStarFilter(props) {\r\n  const [minValue, setMinValue] = React.useState(props.selectedValue);\r\n\r\n  return (\r\n    <div>\r\n      <Box component=\"fieldset\" mb={3} borderColor=\"transparent\"\r\n        style={{\r\n          position: \"absolute\",\r\n          left: \"80%\",\r\n          top:7,\r\n          backgroundColor:\"white\"\r\n    }}\r\n      >\r\n        <Typography component=\"legend\">Min</Typography>\r\n        <Rating\r\n          name=\"filter-min-rating\" defaultValue={1} size=\"small\" \r\n          value={minValue}\r\n          onChange={(event, newValue) => {\r\n            setMinValue(newValue);\r\n            props.updateMinRating(newValue);\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n/**\r\n * Component MaxStarFilter displays a current maximum rating filter.\r\n * Following parameters are used:\r\n * - selectedValue (current maximum rating filter)\r\n * - updateMaxRating (parent method to update current maximum rating filter)\r\n */\r\nexport default function MaxStarFilter(props) {\r\n  const [maxValue, setMaxValue] = React.useState(props.selectedValue);\r\n\r\n  return (\r\n    <div>\r\n      <Box component=\"fieldset\" mb={3} borderColor=\"transparent\"\r\n        style={{\r\n            position: \"absolute\",\r\n            left: \"87%\",\r\n            top:7,\r\n            backgroundColor:\"white\"\r\n        }}\r\n      >\r\n        <Typography component=\"legend\">Max</Typography>\r\n        <Rating\r\n            name=\"filter-max-rating\" defaultValue={5} size=\"small\" \r\n            value={maxValue}\r\n            onChange={(event, newValue) => {\r\n            setMaxValue(newValue);\r\n            props.updateMaxRating(newValue);\r\n          }}\r\n        />\r\n      </Box>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport RestaurantListItem from \"./RestaurantListItem\"\r\nimport MinStarFilter from \"../RestaurantComponents/MinStarFilter\"\r\nimport MaxStarFilter from \"../RestaurantComponents/MaxStarFilter\"\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: 275,\r\n    height: 700,\r\n    zindex: 1,\r\n    position: \"absolute\",\r\n    top:\"12%\",\r\n    left: \"80%\",\r\n    overflow:\"scroll\",\r\n    opacity:\"0.9\",\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  inline: {\r\n    display: 'inline',\r\n  },\r\n}));\r\n\r\n/**\r\n * Component RestaurantList displays the list of restaurant.\r\n * It is displayed on the right side of the page.\r\n * It contains a list of restaurantListItem, also the components MinStar/MaxStarFilter.\r\n * Following parameters are used: \r\n * - filterMinRating (current minimum filter)\r\n * - updateMinRating (parent method to update current minimum filter)\r\n * - filterMaxRating (current maximum filter)\r\n * - updateMaxRating (parent method to update current maximum filter)\r\n * - restaurantArray (all restaurant)\r\n * - onClickListItem (parent method to open the corresponding restaurant)\r\n */\r\nexport default function RestaurantList(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div>\r\n      <MinStarFilter\r\n        selectedValue={props.filterMinRating}\r\n        updateMinRating={props.updateMinRating}\r\n        />\r\n      <MaxStarFilter\r\n        selectedValue={props.filterMaxRating}\r\n        updateMaxRating={props.updateMaxRating}\r\n        />\r\n    \r\n      <List className={classes.root}>\r\n        {Object.keys(props.restaurantArray).map(restaurant_id => {\r\n          if(props.restaurantArray[restaurant_id].rating >= props.filterMinRating && props.restaurantArray[restaurant_id].rating <= props.filterMaxRating){\r\n            return (\r\n              <RestaurantListItem \r\n                key={restaurant_id}\r\n                restaurant={props.restaurantArray[restaurant_id]}\r\n                onClickListItem={props.onClickListItem}\r\n            />)\r\n      }else{\r\n        return null;\r\n      }\r\n      })}\r\n      </List>\r\n    </div>\r\n      )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Map, GoogleApiWrapper, Marker, InfoWindow,} from 'google-maps-react';\r\n\r\nimport MapConfig from \"./MapConfig\"\r\nimport RestaurantDetails from '../AsideComponents/RestaurantDetails';\r\nimport RestaurantList from \"../AsideComponents/RestaurantList\"\r\n\r\n/**\r\n * Component MapContainter displays the Map/Markers/InfoWindow/RestaurantDetails/RestaurantList on the page.\r\n */\r\nfunction MapContainer(props) {\r\n  const [zoomLevel, setZoomLevel] = useState(MapConfig.zoomLevel)\r\n  const [lat] = useState(MapConfig.lat || 51.4344);\r\n  const [lng] = useState(MapConfig.lng || 6.7623);\r\n  const [hasErrors,setErrors] = useState(false);\r\n  const [restaurantArray, setRestaurantArray] = useState([]);\r\n  const [restaurantDetailsList, setRestaurantDetailsList] = useState([]);\r\n  \r\n  const mapObject = new window.google.maps.Map(document.createElement('div'));\r\n  const googlePlacesService = new window.google.maps.places.PlacesService(mapObject);\r\n\r\n  /**\r\n   * Fetch data from GoogleApi which will be saved in the restaurantArray.\r\n   */\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const res = await fetch(\"http://cors.io/?https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=51.434406,6.762329&radius=1500&type=restaurant&key=AIzaSyC6iHzGGrNmtKZB-LDf2tCYMOQXKD6YPac\");\r\n      res\r\n        .json()\r\n        .then(res => storeRestaurantArrayResults(res))\r\n        .catch(err => setErrors(err));\r\n    }\r\n\r\n    fetchData();\r\n\r\n  }, [hasErrors]);\r\n  \r\n  const [state, setState] = useState({\r\n    activeMarker: {},\r\n    activeRestaurant: {},\r\n    activeRestaurantDetails: {},\r\n    showingInfoWindow: false,\r\n    showingRestaurantDetailsWindow: false,\r\n    text: '',\r\n    tempMarker:false,\r\n    createRestaurantForm: false,\r\n    tempMarkerLocation:{},\r\n    filterMinRating:1,\r\n    filterMaxRating:5,\r\n  });\r\n  \r\n  /**\r\n   * store and convert the fetch data into associative array (restaurant id as index for rating update purpose)\r\n   */\r\n  const storeRestaurantArrayResults = (props) => {\r\n    if(props && props.results){\r\n      let newRestaurantArray = [];\r\n      props.results.map(restaurant => {\r\n        if(restaurant && restaurant.id){\r\n          newRestaurantArray[restaurant.id] = restaurant\r\n        }\r\n      });\r\n      setRestaurantArray(newRestaurantArray);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Set the current marker as active.\r\n   * Fetch and store restaurant details via googlePlacesService.\r\n   * Displays restaurantDetails and InfoWindow.\r\n   */\r\n  const onMarkerClick = (props, marker) => {\r\n    //check if restaurant has a place_id\r\n    if(\r\n      marker.restaurant \r\n      && marker.restaurant.place_id\r\n    ){ //real restaurant\r\n      //check if details are already fetched\r\n      if(!restaurantDetailsList[marker.restaurant.id]){ // restaurant details not found, data will be fetched\r\n        let request = {\r\n          placeId: marker.restaurant.place_id\r\n        };\r\n\r\n        googlePlacesService.getDetails(request, (placeResult, status) => {\r\n          let tempRestaurantDetailsList = restaurantDetailsList;\r\n          tempRestaurantDetailsList[marker.restaurant.id] = placeResult;\r\n          setRestaurantDetailsList(tempRestaurantDetailsList);\r\n          setState({\r\n            ...state,\r\n            activeMarker: marker,\r\n            activeRestaurant: marker.restaurant,\r\n            activeRestaurantDetails: placeResult,\r\n            showingInfoWindow: true,\r\n            showingRestaurantDetailsWindow: true,\r\n            createRestaurantForm:false,\r\n            text: marker.text || ''\r\n          });\r\n        });\r\n      }else{ //restaurant details found\r\n        setState({\r\n          ...state,\r\n          activeMarker: marker,\r\n          activeRestaurant: marker.restaurant,\r\n          activeRestaurantDetails: restaurantDetailsList[marker.restaurant.id],\r\n          showingInfoWindow: true,\r\n          showingRestaurantDetailsWindow: true,\r\n          createRestaurantForm:false,\r\n          text: marker.text || ''\r\n        });\r\n      }\r\n    }else{ //user created restaurant\r\n      //check if details are already created\r\n      if(\r\n        marker\r\n        && marker.restaurant\r\n        && marker.restaurant.id\r\n        && restaurantDetailsList[marker.restaurant.id]\r\n      ){ //already existing\r\n        setState({\r\n          ...state,\r\n          activeMarker: marker,\r\n          activeRestaurant: marker.restaurant,\r\n          activeRestaurantDetails: restaurantDetailsList[marker.restaurant.id],\r\n          showingInfoWindow: true,\r\n          showingRestaurantDetailsWindow: true,\r\n          createRestaurantForm:false,\r\n          text: marker.text || ''\r\n        });\r\n      }else{ //no details existing\r\n        setState({\r\n          ...state,\r\n          activeMarker: marker,\r\n          activeRestaurant: marker.restaurant,\r\n          activeRestaurantDetails: {},\r\n          showingInfoWindow: true,\r\n          showingRestaurantDetailsWindow: true,\r\n          createRestaurantForm:false,\r\n          text: marker.text || ''\r\n        });\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  const onInfoWindowClose = () => {\r\n    setState({\r\n      ...state,\r\n      activeMarker: null,\r\n      showingInfoWindow: false,\r\n    });\r\n  }\r\n\r\n  const addRestaurant = (props) =>{\r\n    if(state.tempMarkerLocation){\r\n      const newMarker={\r\n        \"geometry\": {\r\n          \"location\":{\r\n            \"lat\":state.tempMarkerLocation.lat,\r\n            \"lng\":state.tempMarkerLocation.lng\r\n          }\r\n        },\r\n          \"name\":props.name,\r\n          \"id\":Date.now()+Math.floor(Math.random()*100),\r\n          \"rating\":1,\r\n          \"vicinity\":props.address,\r\n          \"tempMarker\":true\r\n      };\r\n      let newRestaurantArray=restaurantArray;\r\n      newRestaurantArray[newMarker.id] = newMarker;\r\n      setRestaurantArray(newRestaurantArray)\r\n      setState({\r\n        ...state,\r\n        tempMarker:true,\r\n        tempMarkerLocation:{},\r\n        createRestaurantForm:false\r\n      })\r\n    }\r\n  }\r\n\r\n  const addReview=(props) =>{\r\n    if(\r\n      props \r\n      && (\r\n        props.review\r\n        || props.rating\r\n      )\r\n    ){\r\n      let review = props.review;\r\n      if(!review){\r\n        review = '';\r\n      }\r\n      let rating = props.rating;\r\n      if(!rating || rating < 1 || rating > 5){\r\n        rating = 1;\r\n      }\r\n      let tempRestaurantDetailsList = restaurantDetailsList\r\n      if(!tempRestaurantDetailsList[state.activeRestaurant.id]){\r\n        tempRestaurantDetailsList[state.activeRestaurant.id] = {\r\n          reviews: []\r\n        }\r\n      }\r\n      tempRestaurantDetailsList[state.activeRestaurant.id].reviews.push({\r\n        text: review,\r\n        rating: rating,\r\n        author_name:\"Developer\"\r\n      });\r\n      let cnt_rating = 0;\r\n      let sum_rating = 0;\r\n      tempRestaurantDetailsList[state.activeRestaurant.id].reviews.map(restaurantReview => {\r\n        if(restaurantReview.rating){\r\n          cnt_rating++;\r\n          sum_rating+=restaurantReview.rating;\r\n        }\r\n      });\r\n      let avg_rating = sum_rating / cnt_rating;\r\n      let tempRestaurantArray = restaurantArray;\r\n      tempRestaurantArray[state.activeRestaurant.id].rating = avg_rating;\r\n      setRestaurantDetailsList(tempRestaurantDetailsList);\r\n      setRestaurantArray(tempRestaurantArray);\r\n    }\r\n    setState({\r\n      ...state,\r\n      showingInfoWindow:false,\r\n      activeMarker:null,\r\n      activeRestaurant:null,\r\n      showingRestaurantDetailsWindow:false,\r\n      tempMarkerLocation:{},\r\n      createRestaurantForm:false\r\n    })\r\n  };\r\n  const onMapClick = (props,map,event) => {\r\n      setState({\r\n        ...state,\r\n        showingInfoWindow:false,\r\n        activeMarker:null,\r\n        activeRestaurant:null,\r\n        showingRestaurantDetailsWindow:false,\r\n        tempMarkerLocation:{lat:event.latLng.lat(),lng:event.latLng.lng()},\r\n        createRestaurantForm:!state.createRestaurantForm\r\n      })\r\n  }\r\n\r\n  const updateMinRating = (value) => {\r\n    if(!value || value < 1 || value > 5){\r\n      value = 1;\r\n    }\r\n    setState({\r\n      ...state,\r\n      filterMinRating: value,\r\n    });\r\n  }\r\n\r\n  const updateMaxRating = (value) => {\r\n    if(!value || value < 1 || value > 5){\r\n      value = 5;\r\n    }\r\n    setState({\r\n      ...state,\r\n      filterMaxRating: value,\r\n    });\r\n  }\r\n\r\n  const onRestaurantListItemClick = (props) => {\r\n    if(\r\n      props.restaurant \r\n      && props.restaurant.place_id\r\n    ){\r\n      if(!restaurantDetailsList[props.restaurant.id]){\r\n        let request = {\r\n          placeId: props.restaurant.place_id\r\n        };\r\n        googlePlacesService.getDetails(request, (placeResult, status) => {\r\n          let tempRestaurantDetailsList = restaurantDetailsList;\r\n          tempRestaurantDetailsList[props.restaurant.id] = placeResult;\r\n          setRestaurantDetailsList(tempRestaurantDetailsList);\r\n          setState({\r\n            ...state,\r\n            activeMarker: null,\r\n            showingInfoWindow: false,\r\n            activeRestaurantDetails: placeResult,\r\n            activeRestaurant: props.restaurant,\r\n            showingRestaurantDetailsWindow: true,\r\n            createRestaurantForm:false\r\n          });\r\n        });\r\n      }else{\r\n        setState({\r\n          ...state,\r\n          activeMarker: null,\r\n          showingInfoWindow: false,\r\n          activeRestaurantDetails: restaurantDetailsList[props.restaurant.id],\r\n          activeRestaurant: props.restaurant,\r\n          showingRestaurantDetailsWindow: true,\r\n          createRestaurantForm:false\r\n        });\r\n      }\r\n    }else{\r\n      if(\r\n        props\r\n        && props.restaurant\r\n        && props.restaurant.id\r\n        && restaurantDetailsList[props.restaurant.id]\r\n      ){\r\n        setState({\r\n          ...state,\r\n          activeMarker: null,\r\n          showingInfoWindow: false,\r\n          activeRestaurantDetails: restaurantDetailsList[props.restaurant.id],\r\n          activeRestaurant: props.restaurant,\r\n          showingRestaurantDetailsWindow: true,\r\n          createRestaurantForm:false\r\n        });\r\n      }else{\r\n        setState({\r\n          ...state,\r\n          activeMarker: null,\r\n          showingInfoWindow: false,\r\n          activeRestaurantDetails: {},\r\n          activeRestaurant: props.restaurant,\r\n          showingRestaurantDetailsWindow: true,\r\n          createRestaurantForm:false\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <div className='map' id=\"myMap\">\r\n      <Map\r\n        google={props.google}\r\n        onClick={onMapClick}\r\n        zoom={zoomLevel}\r\n        disableDefaultUI={MapConfig.useDefaultUI}\r\n        initialCenter={{\r\n          lat,\r\n          lng\r\n        }}\r\n      >\r\n        {restaurantArray && Object.keys(restaurantArray).map(restaurant_id => {\r\n          if(restaurantArray[restaurant_id].rating >= state.filterMinRating && restaurantArray[restaurant_id].rating <= state.filterMaxRating){\r\n            return (\r\n            <Marker\r\n              onClick={onMarkerClick}\r\n              key={restaurant_id}\r\n              text= {restaurantArray[restaurant_id].name} \r\n              position={{ lat: restaurantArray[restaurant_id].geometry.location.lat, lng: restaurantArray[restaurant_id].geometry.location.lng}}\r\n              restaurant={restaurantArray[restaurant_id]}\r\n            />\r\n            )\r\n          }else{\r\n            return null;\r\n          }\r\n        })}\r\n        <Marker\r\n          onClick={onMarkerClick}\r\n          text='Current Position'\r\n        />\r\n\r\n        <InfoWindow\r\n          marker={state.activeMarker}\r\n          onClose={onInfoWindowClose}\r\n          visible={state.showingInfoWindow}>\r\n          <div>\r\n            <p>{state.text}</p>\r\n          </div>\r\n        </InfoWindow>\r\n\r\n        {state.activeRestaurant && state.showingRestaurantDetailsWindow\r\n          ? \r\n          <RestaurantDetails \r\n            restaurant={state.activeRestaurant}\r\n            details={state.activeRestaurantDetails}\r\n            addReview={addReview}\r\n          />\r\n          : null\r\n        }\r\n\r\n        {restaurantArray\r\n          ?\r\n          <RestaurantList\r\n            restaurantArray={restaurantArray}\r\n            onClickListItem={onRestaurantListItemClick}\r\n            updateMinRating={updateMinRating}\r\n            updateMaxRating={updateMaxRating}\r\n            filterMinRating={state.filterMinRating}\r\n            filterMaxRating={state.filterMaxRating}\r\n          />\r\n          : null\r\n        }\r\n\r\n        {state.createRestaurantForm\r\n          ?\r\n          <RestaurantDetails\r\n            addRestaurant={addRestaurant}\r\n          />\r\n          : null\r\n        }\r\n      </Map>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoogleApiWrapper({ apiKey: MapConfig.apiKey })(MapContainer);","import React from 'react';\r\n\r\n\r\nimport \"../GoogleMapsComponents/MapContainer\"\r\nimport \"../AsideComponents/RestaurantDetails\"\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MapContainer from '../GoogleMapsComponents/MapContainer';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(5),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\n/**\r\n * Component MainGrid displays the MapContainer.\r\n */\r\nexport default function MainGrid() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} sm={12}>\r\n          <MapContainer className={classes.paper}>xs=12 sm=6</MapContainer>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\"\n\nimport MainGrid from \"./Components/GridComponent/MainGrid\"\n\nfunction App () {\n  return (\n    <div>\n      <MainGrid />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}